package com.pos.backend.service.base;

import java.util.Set;

import org.springframework.security.authentication.AuthenticationManager;
import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.security.core.userdetails.UsernameNotFoundException;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.pos.backend.dto.auth.AuthResponse;
import com.pos.backend.dto.auth.LoginRequest;
import com.pos.backend.dto.auth.RegisterRequest;
import com.pos.backend.dto.employee.EmployeeResponse;
import com.pos.backend.model.Employee;
import com.pos.backend.model.Role;
import com.pos.backend.repository.EmployeeRepository;
import com.pos.backend.repository.RoleRepository;
import com.pos.backend.security.JwtTokenProvider;

@Service
public class AuthService {

    private final AuthenticationManager authenticationManager;
    private final JwtTokenProvider jwtTokenProvider;
    private final EmployeeRepository employeeRepository;
    private final RoleRepository roleRepository;
    private final PasswordEncoder passwordEncoder;
    private final EmployeeService employeeService; // üëà Th√™m EmployeeService

    public AuthService(AuthenticationManager authenticationManager,
            JwtTokenProvider jwtTokenProvider,
            EmployeeRepository employeeRepository,
            RoleRepository roleRepository,
            PasswordEncoder passwordEncoder,
            EmployeeService employeeService) { // üëà Th√™m EmployeeService
        this.authenticationManager = authenticationManager;
        this.jwtTokenProvider = jwtTokenProvider;
        this.employeeRepository = employeeRepository;
        this.roleRepository = roleRepository;
        this.passwordEncoder = passwordEncoder;
        this.employeeService = employeeService; // üëà Kh·ªüi t·∫°o
    }

    /**
     * X√°c th·ª±c ng∆∞·ªùi d√πng
     */
    public AuthResponse authenticateUser(LoginRequest loginRequest) {
        // X√°c th·ª±c username/password
        Authentication authentication = authenticationManager.authenticate(
                new UsernamePasswordAuthenticationToken(loginRequest.getUsername(), loginRequest.getPassword()));

        SecurityContextHolder.getContext().setAuthentication(authentication);

        // Sinh token
        String jwt = jwtTokenProvider.generateToken(authentication);

        // L·∫•y th√¥ng tin nh√¢n vi√™n
        Employee employee = employeeRepository.findByUsername(loginRequest.getUsername())
                .orElseThrow(() -> new UsernameNotFoundException(
                        "User not found with username: " + loginRequest.getUsername()));

        // L·∫•y quy·ªÅn cu·ªëi c√πng (role + individual)
        Set<String> finalPermissions = employeeService.getFinalPermissionsForEmployee(employee.getId());

        // T·∫°o EmployeeResponse ƒë·∫ßy ƒë·ªß (c√≥ quy·ªÅn)
        EmployeeResponse employeeResponse = new EmployeeResponse(employee, finalPermissions);

        return new AuthResponse(jwt, "Login successful", employee.getId());
    }

    /**
     * ƒêƒÉng k√Ω ng∆∞·ªùi d√πng m·ªõi
     */
    @Transactional
    public EmployeeResponse registerUser(RegisterRequest registerRequest) {
        if (employeeRepository.findByUsername(registerRequest.getUsername()).isPresent()) {
            throw new IllegalArgumentException("Username is already taken!");
        }

        // L·∫•y role m·∫∑c ƒë·ªãnh
        Role defaultRole = roleRepository.findByName("Nh√¢n vi√™n")
                .orElseThrow(() -> new RuntimeException("Default role 'Nh√¢n vi√™n' not found. Please create it."));

        // T·∫°o nh√¢n vi√™n m·ªõi
        Employee employee = new Employee();
        employee.setName(registerRequest.getName());
        employee.setUsername(registerRequest.getUsername());
        employee.setEmail(registerRequest.getEmail());
        employee.setPhone(registerRequest.getPhone());
        employee.setPasswordHash(passwordEncoder.encode(registerRequest.getPassword()));
        employee.setRole(defaultRole);
        employee.setIsActive(true);

        Employee savedEmployee = employeeRepository.save(employee);

        // Kh√¥ng c√≥ quy·ªÅn ri√™ng l√∫c ƒëƒÉng k√Ω, ch·ªâ tr·∫£ v·ªÅ th√¥ng tin c∆° b·∫£n
        return new EmployeeResponse(savedEmployee);
    }
}
